The ``1-my_list`` module
============================

Using ``1-mylist``
---------------------

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Correct ClassType test:
    >>> myl = MyList()
    >>> type(myl) == MyList
    True

Correct Instance test:
    >>> myl = MyList()
    >>> isinstance(myl, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method with 1arg:
    >>> ml.print_sorted([3, 4, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method with 2args:
    >>> ml.print_sorted([6, 6, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Empty list test:
    >>> myl = MyList()
    >>> myl.print_sorted()
    []

Norm list test:
    >>> myl = MyList([4, 10, 1])
    >>> myl.print_sorted()
    [1, 4, 10]

Negative list test:
    >>> ml = MyList([-100, -98, -23, 0, -2, -12])
    >>> ml.print_sorted()
    [-100, -98, -23, -12, -2, 0]

List sorted already:
    >>> myl = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> myl.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

Test append:
    >>> myl = MyList()
    >>> myl.append(9)
    >>> myl
    [9]
