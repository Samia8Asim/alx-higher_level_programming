The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
---------------------

Import module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test norm matrix:
    >>> matrix_divided([[6, 9, 15], [3, 9, 24]], 3)
    [[2.0, 3.0, 5.0], [1.0, 3.0, 8.0]]

Test one element:
    >>> matrix_divided([[5]], 5)
    [[1.0]]

Test div by negative:
    >>> matrix_divided([[6, 4, 8], [5, 9, 3]], -3)
    [[-2.0, -1.33, -2.67], [-1.67, -3.0, -1.0]]

Test div by zero:
    >>> matrix_divided([[5, 29, 9], [3, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Test empty matrix:
    >>> matrix_divided([[]], 23)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with non number
    >>> matrix_divided([[6, 3, 9], [9, "sam", 2]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with different rows
    >>> matrix_divided([[4, 4, 2], [8, 3]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test empty matrix2:
    >>> matrix_divided([[], [], []], 9)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Test fisrt el arg str:
    >>> matrix_divided("sam", 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Test fisrt el arg empty list:
    >>> matrix_divided([], 25)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test missing one arg:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
